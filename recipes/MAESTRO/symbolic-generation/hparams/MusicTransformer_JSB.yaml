# ############################################################################
# Model: Language model with a LSTM
# Training: JSB dataset
# Authors:  Edward Son 2021,
#           Gabriel Kreplak 2021,
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2602
# this field is just a self reminder for the particular experiment
experiment_name: JSB_chorales_RNN_LM

# this needs to be set according to the dataset name
# options are: JSB_chorales, MuseData, Nottingham,
#              Piano-Midi, MAESTRO_v2, MAESTRO_v3
dataset_name: JSB_chorales

__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/<experiment_name>/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# this points to the dataset file
data_path: !PLACEHOLDER

midi_file: !ref <output_folder>/<experiment_name>.MIDI
resolution: 25
time_scale: 9
velocity: 80
note_duration: 15

train_csv: !ref <data_path>/train.csv
valid_csv: !ref <data_path>/valid.csv
test_csv: !ref <data_path>/test.csv

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Training parameters
number_of_epochs: 2000
batch_size: 32
sequence_length: 100
lr: 0.001
dropout: 0.4
accu_steps: 2 # Gradient accumulation to simulate large batch training
ckpt_interval_minutes: 15 # save checkpoint every N min

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    shuffle: True

valid_dataloader_opts:
    batch_size: 1

test_dataloader_opts:
    batch_size: 1

# Model parameters
emb_dim: 88
nhead: 8 # number of attention heads
num_encoder_layers: 6 # number of encoder layers
num_decoder_layers: 0 # number of decoder layers
d_ffn: 1024 # dimension of feedforward network

# Outputs
output_neurons: 88 # index(blank/eos/bos) = 0

# LSTM custom model
model: !new:speechbrain.lobes.models.transformer.MusicTransformer
    nhead: !ref <nhead>
    d_model: !ref <emb_dim>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>

# Cost function used for training the model
compute_cost: !name:speechbrain.nnet.losses.mse_loss # nll_loss

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
optimizer: !name:torch.optim.Adam
    lr: !ref <lr>

# This function manages learning rate annealing over the epochs.
# We here use the NewBoB algorithm, that anneals the learning rate if
# the improvements over two consecutive epochs is less than the defined
# threshold.
lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0003
    annealing_factor: 0.8
    patient: 500

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    model: !ref <model>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        counter: !ref <epoch_counter>

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    loadables:
        model: !ref <model>
