# ############################################################################
# Model: Language model with a LSTM
# Training: MAESTRO dataset
# Authors:  Edward Son 2021, Gabriel Kreplak 2021
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 2602
# this field is just a self reminder for the particular experiment
experiment_name: MAESTRO_RNN_LM

# this needs to be set according to the dataset name
# For the MAESTRO dataset, we support MAESTRO_v2, and MAESTRO_v3
dataset_name: MAESTRO_v2

__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/<experiment_name>/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# this points to the maestro folder
data_folder: !PLACEHOLDER

# this csv file comes with the dataset, and defines the dataset
# For MAESTRO_v3, you need to update the file below to maestro-v3.0.0.csv
maestro_csv: maestro-v2.0.0.csv

# this file is needed to save the generated music in a MIDI file
midi_file: !ref <experiment_name>.MIDI
resolution: 25
time_scale: 9
velocity: 80
note_duration: 15

train_csv: !ref <data_folder>/train.csv
valid_csv: !ref <data_folder>/valid.csv
test_csv: !ref <data_folder>/test.csv

# When MAESTRO used, these are the number of midi files to picked up
MAESTRO_params:
  num_train_files: 962
  num_valid_files: 137
  num_test_files: 177

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: !ref <train_log>

# Training parameters
number_of_epochs: 60
batch_size: 128
sequence_length: 300
lr: 0.001
dropout: 0.2
accu_steps: 1 # Gradient accumulation to simulate large batch training
ckpt_interval_minutes: 15 # save checkpoint every N min

# Dataloader options
train_dataloader_opts:
  batch_size: !ref <batch_size>
  shuffle: True

valid_dataloader_opts:
  batch_size: 1

test_dataloader_opts:
  batch_size: 1

# Model parameters
emb_dim: 88 # dimension of the embeddings
rnn_size: 200 # dimension of hidden layers
layers: 3 # number of hidden layers

# Outputs
output_neurons: 88 # index(blank/eos/bos) = 0

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined..
model: !new:speechbrain.lobes.music_generation_models.custom_model.CustomModel
  embedding_dim: !ref <emb_dim>
  rnn_size: !ref <rnn_size>
  layers: !ref <layers>

# Cost function used for training the model
compute_cost: !name:torch.nn.functional.binary_cross_entropy

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
optimizer: !name:torch.optim.Adam
  lr: !ref <lr>

# This function manages learning rate annealing over the epochs.
# We here use the NewBoB algorithm, that anneals the learning rate if
# the improvements over two consecutive epochs is less than the defined
# threshold.
lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
  initial_value: !ref <lr>
  improvement_threshold: 0.0003
  annealing_factor: 0.95
  patient: 5

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  model: !ref <model>


# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    model: !ref <model>
    counter: !ref <epoch_counter>

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  loadables:
    model: !ref <model>
